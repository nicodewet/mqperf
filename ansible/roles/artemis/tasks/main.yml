---
- name: Install libaio module (used for persistence)
  package:
    name:   libaio
    state:  installed
    
- name: Create artemis user
  user:
    name: "{{ artemis_username }}"
    shell: /bin/bash    

- name: Download artemis
  get_url:
    dest: "{{ artemis_download_dest }}"
    url:  "{{ artemis_download_url }}"
    
- name: Unpack archive
  unarchive:
    copy:    no
    dest:    /opt
    src:     "{{ artemis_download_dest }}"
    creates: /opt/{{ artemis_name }}
    owner:   "{{ artemis_username }}"

- name: Create user-friendly link
  file:
    state: link
    src: /opt/{{ artemis_name }}
    dest: /opt/artemis

- set_fact: artemis_broker_master="{{ groups['artemis'][0] }}"
- set_fact: artemis_broker_slave_1="{{ groups['artemis'][1] }}"
- set_fact: artemis_broker_slave_2="{{ groups['artemis'][2] }}"

- name: Set hostname master
  run_once: true
  delegate_to: "{{ item }}"
  hostname:
    name: "artemis_broker_master"
  with_items:
    - "{{ artemis_broker_master }}"

- name: Set hostname slave 1
  run_once: true
  delegate_to: "{{ item }}"
  hostname:
    name: "artemis_broker_slave_1"
  with_items:
    - "{{ artemis_broker_slave_1 }}"

- name: Set hostname slave 2
  run_once: true
  delegate_to: "{{ item }}"
  hostname:
    name: "artemis_broker_slave_2"
  with_items:
    - "{{ artemis_broker_slave_2 }}"

- name: Create master broker
  run_once: true
  delegate_to: "{{ item }}"
  command: |
    /opt/{{ artemis_name }}/bin/artemis 
    create 
    /opt/{{ artemis_name }}-broker/ 
    --user artemis 
    --password artemis 
    --allow-anonymous 
    --clustered 
    --host "{{ hostvars[artemis_broker_master].ec2_private_ip_address }}" 
    --cluster-user artemis 
    --cluster-password artemis
  with_items:
    - "{{ artemis_broker_master }}"
    
- name: Create slave 1 broker
  run_once: true
  delegate_to: "{{ item }}"
  command: |
    /opt/{{ artemis_name }}/bin/artemis 
    create 
    /opt/{{ artemis_name }}-broker/ 
    --user artemis 
    --password artemis 
    --allow-anonymous 
    --clustered 
    --host "{{ hostvars[artemis_broker_slave_1].ec2_private_ip_address }}" 
    --cluster-user artemis 
    --cluster-password artemis
  with_items:
    - "{{ artemis_broker_slave_1 }}"

- name: Create slave 2 broker
  run_once: true
  delegate_to: "{{ item }}"
  command: |
    /opt/{{ artemis_name }}/bin/artemis 
    create 
    /opt/{{ artemis_name }}-broker/ 
    --user artemis 
    --password artemis 
    --allow-anonymous 
    --clustered 
    --host "{{ hostvars[artemis_broker_slave_2].ec2_private_ip_address }}" 
    --cluster-user artemis 
    --cluster-password artemis
  with_items:
    - "{{ artemis_broker_slave_2 }}"

- set_fact: 
    tmpl_var_private_ip:          "{{ hostvars[artemis_broker_master].ec2_private_ip_address }}" 
    tmpl_var_connectors:          "{{ [artemis_broker_slave_1, artemis_broker_slave_2] }}"
    tmpl_var_replication_policy:  "<master/>"
  run_once: true  
  delegate_to: "{{ item }}"
  with_items:
    - "{{ artemis_broker_master }}"
  
- name: Copy broker.xml.j2 to master
  run_once: true  
  delegate_to: "{{ item }}"
  template: 
    src=broker.xml.j2
    dest=/opt/{{ artemis_name }}-broker/etc/broker.xml
  with_items:
    - "{{ artemis_broker_master }}"

- name: Copy bootstrap.xml.j2 to master
  run_once: true  
  delegate_to: "{{ item }}"
  template: 
    src=bootstrap.xml.j2
    dest=/opt/{{ artemis_name }}-broker/etc/bootstrap.xml
  with_items:
    - "{{ artemis_broker_master }}"

- set_fact: 
    tmpl_var_private_ip:          "{{ hostvars[artemis_broker_slave_1].ec2_private_ip_address }}" 
    tmpl_var_connectors:          "{{ [artemis_broker_master, artemis_broker_slave_2] }}"
    tmpl_var_replication_policy:  "<slave/>"
  run_once: true  
  delegate_to: "{{ item }}"
  with_items:
    - "{{ artemis_broker_slave_1 }}"

- name: Copy broker.xml.j2 to slave 1
  run_once: true  
  delegate_to: "{{ item }}"
  template: 
    src=broker.xml.j2
    dest=/opt/{{ artemis_name }}-broker/etc/broker.xml
  with_items:
    - "{{ artemis_broker_slave_1 }}"

- name: Copy bootstrap.xml.j2 to slave 1
  run_once: true  
  delegate_to: "{{ item }}"
  template: 
    src=bootstrap.xml.j2
    dest=/opt/{{ artemis_name }}-broker/etc/bootstrap.xml
  with_items:
    - "{{ artemis_broker_slave_1 }}"


- set_fact: 
    tmpl_var_private_ip:          "{{ hostvars[artemis_broker_slave_2].ec2_private_ip_address }}" 
    tmpl_var_connectors:          "{{ [artemis_broker_master, artemis_broker_slave_1] }}"
    tmpl_var_replication_policy:  "<slave/>"
  run_once: true  
  delegate_to: "{{ item }}"
  with_items:
    - "{{ artemis_broker_slave_2 }}"

- name: Copy broker.xml.j2 to slave 2
  run_once: true  
  delegate_to: "{{ item }}"
  template: 
    src=broker.xml.j2
    dest=/opt/{{ artemis_name }}-broker/etc/broker.xml
  with_items:
    - "{{ artemis_broker_slave_2 }}"

- name: Copy bootstrap.xml.j2 to slave 2
  run_once: true  
  delegate_to: "{{ item }}"
  template: 
    src=bootstrap.xml.j2
    dest=/opt/{{ artemis_name }}-broker/etc/bootstrap.xml
  with_items:
    - "{{ artemis_broker_slave_2 }}"

- name: Change broker's owner
  file:
    path: /opt/{{ artemis_name }}-broker/
    owner: "{{artemis_username}}"
    group: "{{artemis_username}}"

- name: Link init script to /etc/init.d
  file:
    state: link
    src: /opt/{{ artemis_name }}-broker/bin/artemis-service
    dest: /etc/init.d/artemis

- name: Increase xmx
  replace:
    path: /opt/apache-artemis-2.2.0-broker/etc/artemis.profile
    regexp: 'Xmx2G'
    replace: 'Xmx4G'
    backup: yes

- name: Start artemis
  environment:
    ARTEMIS_USER: "{{artemis_username}}"
  service:
    name: artemis
    state: restarted
    